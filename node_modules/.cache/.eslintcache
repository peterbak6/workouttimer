[{"/workspaces/workouttimer/src/index.js":"1","/workspaces/workouttimer/src/App.js":"2","/workspaces/workouttimer/src/reportWebVitals.js":"3"},{"size":535,"mtime":1727339975348,"results":"4","hashOfConfig":"5"},{"size":3073,"mtime":1727340917964,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1727339975348,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"1b6pvot",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/workspaces/workouttimer/src/index.js",[],[],[],"/workspaces/workouttimer/src/App.js",["19"],[],"import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [seconds, setSeconds] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [previousMinute, setPreviousMinute] = useState(0);\n  const [gongReady, setGongReady] = useState(false);\n  const [audioUnlocked, setAudioUnlocked] = useState(false);\n  const timerRef = useRef(null);\n  const gongSoundRef = useRef(null);\n  const silentAudioRef = useRef(null);\n  const [backgroundColor, setBackgroundColor] = useState('#fafafa');\n\n  // Effect for updating the timer every second\n  useEffect(() => {\n    if (isRunning) {\n      timerRef.current = setInterval(() => {\n        setSeconds((prev) => prev + 1);\n      }, 1000);\n    } else if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    return () => clearInterval(timerRef.current); // Cleanup\n  }, [isRunning]);\n\n  useEffect(() => {\n    const minutes = Math.floor(seconds / 60);\n    if (minutes > previousMinute) {\n      playGong(); // Play gong when minute increases\n      setPreviousMinute(minutes);\n    }\n  }, [seconds, previousMinute]);\n\n  // Function to unlock the audio context on iOS using the silent audio clip\n  const unlockAudioContext = () => {\n    if (!audioUnlocked) {\n      silentAudioRef.current.play().then(() => {\n        setAudioUnlocked(true); // Unlock audio context on iOS\n        setGongReady(true); // Now gong sound can play\n        playGong(); // Play gong when timer starts\n      }).catch((error) => console.log('Silent audio playback failed:', error));\n    } else {\n      setGongReady(true); // Gong can play after unlocking\n      playGong(); // Play gong when timer starts\n    }\n  };\n\n  const playGong = () => {\n    if (gongReady && audioUnlocked) {\n      gongSoundRef.current.currentTime = 0;\n      gongSoundRef.current.play().catch((error) => console.log('Gong playback failed:', error));\n    }\n  };\n\n  // Function to handle starting the timer\n  const startTimer = () => {\n    setBackgroundColor('#a6d854'); // Pastel blue for running\n    unlockAudioContext();\n    setIsRunning(true);\n  };\n\n  // Function to handle stopping the timer\n  const stopTimer = () => {\n    setIsRunning(false);\n    setBackgroundColor('#ffd92f'); // Pastel yellow for paused\n    playGong(); // Play gong when pausing\n  };\n\n  // Function to handle resetting the timer\n  const resetTimer = () => {\n    stopTimer();\n    setSeconds(0);\n    setPreviousMinute(0);\n    setBackgroundColor('#fafafa'); // Pastel green for idle\n  };\n\n  return (\n    <div className=\"timer-container\" style={{ backgroundColor }} \n      onClick={() => (isRunning ? stopTimer() : startTimer())} \n      onDoubleClick={resetTimer}>\n      <h1>{`${String(Math.floor(seconds / 60)).padStart(2, '0')}:${String(seconds % 60).padStart(2, '0')}`}</h1>\n\n      {/* Silent audio for iOS audio context unlock */}\n      <audio ref={silentAudioRef} src=\"/silent.mp3\" preload=\"auto\"></audio>\n\n      {/* Gong sound */}\n      <audio ref={gongSoundRef} src=\"/gong.mp3\" preload=\"auto\"></audio>\n    </div>\n  );\n}\n\nexport default App;\n","/workspaces/workouttimer/src/reportWebVitals.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":33,"column":6,"nodeType":"22","endLine":33,"endColumn":31,"suggestions":"23"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'playGong'. Either include it or remove the dependency array.","ArrayExpression",["24"],{"desc":"25","fix":"26"},"Update the dependencies array to be: [seconds, previousMinute, playGong]",{"range":"27","text":"28"},[1099,1124],"[seconds, previousMinute, playGong]"]