[{"/Users/peterbak/Documents/GitHub/workouttimer/src/index.js":"1","/Users/peterbak/Documents/GitHub/workouttimer/src/reportWebVitals.js":"2","/Users/peterbak/Documents/GitHub/workouttimer/src/App.js":"3"},{"size":535,"mtime":1665142311210,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1665142311211,"results":"6","hashOfConfig":"5"},{"size":2633,"mtime":1665151026862,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t6wzcj",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"/Users/peterbak/Documents/GitHub/workouttimer/src/index.js",[],[],"/Users/peterbak/Documents/GitHub/workouttimer/src/reportWebVitals.js",[],[],"/Users/peterbak/Documents/GitHub/workouttimer/src/App.js",["18","19","20"],[],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, useRef, useEffect } from 'react'\nimport bell1 from './bell1.mp3';\nimport bell2 from './bell2.mp3'\n\nconst App = () => {\n\n  const Ref = useRef(null);\n\n  const [timer, setTimer] = useState('00:00:00');\n  const [target, setTarget] = useState(10);\n  const [remLoops, setRemLoops] = useState(1);\n  const [timerOn, setTimerOn] = useState(false);\n\n  const playSound = (bell) => {\n    const audio = new Audio(bell);\n    audio.play();\n  }\n\n  const getNumberWithOrdinal = (n) => {\n    var s = [\"th\", \"st\", \"nd\", \"rd\"],\n        v = n % 100;\n    return \"\" + (s[(v - 20) % 10] || s[v] || s[0]);\n  }\n\n  const getTimeRemaining = (e) => {\n    const total = Date.parse(e) - Date.parse(new Date());\n    const seconds = Math.floor((total / 1000) % 60);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n    const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n    return {\n      total, hours, minutes, seconds\n    };\n  }\n\n  const showTimer = (hours, minutes, seconds) => {\n    return (hours > 9 ? hours : '0' + hours) + ':' +\n      (minutes > 9 ? minutes : '0' + minutes) + ':'\n      + (seconds > 9 ? seconds : '0' + seconds)\n  }\n\n  const startTimer = (e) => {\n    let { total, hours, minutes, seconds } = getTimeRemaining(e);\n    if (total >= 0) {\n      if (total <= 3000 && total > 0) {\n        playSound(bell1);\n      }\n      setTimer(\n        showTimer(hours, minutes, seconds)\n      )\n      if (total === 0) {\n        playSound(bell2);\n        setRemLoops(l => l + 1);\n        clearTimer(getDeadTime());\n      }\n    }\n  }\n\n  const stopTimer = () => {\n    setTimerOn(false)\n    if (Ref.current) clearInterval(Ref.current);\n    Ref.current = null;\n\n  }\n\n  const clearTimer = (e) => {\n    setTimerOn(true);\n    if (Ref.current) clearInterval(Ref.current);\n    const id = setInterval(() => {\n      startTimer(e);\n    }, 1000)\n    Ref.current = id;\n  }\n\n  const getDeadTime = () => {\n    let deadline = new Date();\n    deadline.setSeconds(deadline.getSeconds() + target);\n    return deadline;\n  }\n\n  const onClickStart = () => {\n    setRemLoops(1);\n    clearTimer(getDeadTime());\n  }\n\n  const onClickStop = () => {\n    stopTimer();\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"Timer\">{remLoops}\n        <span className='Ordinal'>{getNumberWithOrdinal(remLoops)}  </span> \n      </h1>\n      <h1 className=\"Timer\">{timer}</h1>\n      {\n        timerOn ? <button className=\"Button stop\" onClick={onClickStop}>Stop</button> :\n        <button className=\"Button start\" onClick={onClickStart}>Start</button>\n      }\n    </div>\n  )\n}\n\nexport default App;\n",{"ruleId":"21","severity":1,"message":"22","line":1,"column":8,"nodeType":"23","messageId":"24","endLine":1,"endColumn":12},{"ruleId":"21","severity":1,"message":"25","line":3,"column":35,"nodeType":"23","messageId":"24","endLine":3,"endColumn":44},{"ruleId":"21","severity":1,"message":"26","line":12,"column":18,"nodeType":"23","messageId":"24","endLine":12,"endColumn":27},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'setTarget' is assigned a value but never used."]